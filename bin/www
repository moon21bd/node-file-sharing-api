#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require("debug")("filesharingapi:server"); // setting up debugger for filesharing api server
const http = require("http"); // requiring http node module
const bootstrap = require("../app")(); // requiring main app js

bootstrap.then((app) => {
  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || "3000");
  app.set("port", port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app);

  if (!process.env.NET_INTERFACE) {
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, () => {
      console.log(`File sharing api App is listening on *:${port}`);
    });
  } else {
    server.listen(port, process.env.NET_INTERFACE, () => {
      console.log(
        `File sharing api App is listening on ${process.env.NET_INTERFACE}:${port}`
      );
    });
  }

  server.on("error", onError(port)); // onerror event listener
  server.on("listening", onListening(server)); // onlistening event listener
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(port) {
  return function (error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(bind + " requires elevated privileges");
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(bind + " is already in use");
        process.exit(1);
        break;
      default:
        throw error;
    }
  };
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  return function () {
    const addr = server.address();
    const bind =
      typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
  };
}
